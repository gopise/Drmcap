From bef4c53378fdeb17accf1a651bc9f20621107be1 Mon Sep 17 00:00:00 2001
From: Taichun Yuan <taichun.yuan@nxp.com>
Date: Thu, 11 Nov 2021 16:53:20 +0800
Subject: [PATCH] drm: Add getfb2 ioctl
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Add the getfb2 ioctrl to get the multi-plane (e.g. YUV) FB.
Back port from Linux 5.15. Original commit message below:
------------------------------------------------------------
From 455e00f1412fe51fa7bd21ad6fe0015b163fa9e5 Mon Sep 17 00:00:00 2001
From: Daniel Stone <daniels@collabora.com>
Date: Mon, 16 Dec 2019 19:46:43 -0800
Subject: [PATCH] drm: Add getfb2 ioctl
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

getfb2 allows us to pass multiple planes and modifiers, just like addfb2
over addfb.

Changes since v2:
 - add privilege checks from getfb1 since handles should only be
   returned to master/root

Changes since v1:
 - unused modifiers set to 0 instead of DRM_FORMAT_MOD_INVALID
 - update ioctl number

Signed-off-by: Daniel Stone <daniels@collabora.com>
Signed-off-by: Juston Li <juston.li@intel.com>
Acked-by: Daniel Vetter <daniel.vetter@ffwll.ch>
Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
Signed-off-by: Lyude Paul <lyude@redhat.com>
Link: https://patchwork.freedesktop.org/patch/msgid/20191217034642.3814-1-juston.li@intel.com
------------------------------------------------------------
---
 drivers/gpu/drm/drm_crtc_internal.h |   2 +
 drivers/gpu/drm/drm_framebuffer.c   | 124 ++++++++++++++++++++++++++++
 drivers/gpu/drm/drm_ioctl.c         |   1 +
 include/uapi/drm/drm.h              |   1 +
 4 files changed, 128 insertions(+)

diff --git a/drivers/gpu/drm/drm_crtc_internal.h b/drivers/gpu/drm/drm_crtc_internal.h
index 9ebb88417..45af20dc2 100644
--- a/drivers/gpu/drm/drm_crtc_internal.h
+++ b/drivers/gpu/drm/drm_crtc_internal.h
@@ -170,6 +170,8 @@ int drm_mode_rmfb(struct drm_device *dev,
 		  void *data, struct drm_file *file_priv);
 int drm_mode_getfb(struct drm_device *dev,
 		   void *data, struct drm_file *file_priv);
+int drm_mode_getfb2_ioctl(struct drm_device *dev,
+                         void *data, struct drm_file *file_priv);
 int drm_mode_dirtyfb_ioctl(struct drm_device *dev,
 			   void *data, struct drm_file *file_priv);
 
diff --git a/drivers/gpu/drm/drm_framebuffer.c b/drivers/gpu/drm/drm_framebuffer.c
index 55d92fa8b..221305559 100644
--- a/drivers/gpu/drm/drm_framebuffer.c
+++ b/drivers/gpu/drm/drm_framebuffer.c
@@ -24,6 +24,7 @@
 #include <drm/drmP.h>
 #include <drm/drm_auth.h>
 #include <drm/drm_framebuffer.h>
+#include <drm/drm_gem.h>
 #include <drm/drm_atomic.h>
 
 #include "drm_crtc_internal.h"
@@ -493,6 +494,129 @@ int drm_mode_getfb(struct drm_device *dev,
 	return ret;
 }
 
+/**
+ * drm_mode_getfb2 - get extended FB info
+ * @dev: drm device for the ioctl
+ * @data: data pointer for the ioctl
+ * @file_priv: drm file for the ioctl call
+ *
+ * Lookup the FB given its ID and return info about it.
+ *
+ * Called by the user via ioctl.
+ *
+ * Returns:
+ * Zero on success, negative errno on failure.
+ */
+int drm_mode_getfb2_ioctl(struct drm_device *dev,
+                          void *data, struct drm_file *file_priv)
+{
+        struct drm_mode_fb_cmd2 *r = data;
+        struct drm_framebuffer *fb;
+        unsigned int i;
+        int ret;
+
+        if (!drm_core_check_feature(dev, DRIVER_MODESET))
+                return -EINVAL;
+
+        fb = drm_framebuffer_lookup(dev, file_priv, r->fb_id);
+        if (!fb)
+                return -ENOENT;
+
+        /* For multi-plane framebuffers, we require the driver to place the
+         * GEM objects directly in the drm_framebuffer. For single-plane
+         * framebuffers, we can fall back to create_handle.
+         */
+        if (!fb->obj[0] &&
+            (fb->format->num_planes > 1 || !fb->funcs->create_handle)) {
+                ret = -ENODEV;
+                goto out;
+        }
+
+        r->height = fb->height;
+        r->width = fb->width;
+        r->pixel_format = fb->format->format;
+
+        r->flags = 0;
+        if (dev->mode_config.allow_fb_modifiers)
+                r->flags |= DRM_MODE_FB_MODIFIERS;
+
+        for (i = 0; i < ARRAY_SIZE(r->handles); i++) {
+                r->handles[i] = 0;
+                r->pitches[i] = 0;
+                r->offsets[i] = 0;
+                r->modifier[i] = 0;
+        }
+
+        for (i = 0; i < fb->format->num_planes; i++) {
+                r->pitches[i] = fb->pitches[i];
+                r->offsets[i] = fb->offsets[i];
+                if (dev->mode_config.allow_fb_modifiers)
+                        r->modifier[i] = fb->modifier;
+        }
+
+        /* GET_FB2() is an unprivileged ioctl so we must not return a
+         * buffer-handle to non master/root processes! To match GET_FB()
+         * just return invalid handles (0) for non masters/root
+         * rather than making GET_FB2() privileged.
+         */
+        if (!drm_is_current_master(file_priv) && !capable(CAP_SYS_ADMIN)) {
+                ret = 0;
+                goto out;
+        }
+
+        for (i = 0; i < fb->format->num_planes; i++) {
+                int j;
+
+                /* If we reuse the same object for multiple planes, also
+                 * return the same handle.
+                 */
+                for (j = 0; j < i; j++) {
+                        if (fb->obj[i] == fb->obj[j]) {
+                                r->handles[i] = r->handles[j];
+                                break;
+                        }
+                }
+
+                if (r->handles[i])
+                        continue;
+
+                if (fb->obj[i]) {
+                        ret = drm_gem_handle_create(file_priv, fb->obj[i],
+                                                    &r->handles[i]);
+                } else {
+                        WARN_ON(i > 0);
+                        ret = fb->funcs->create_handle(fb, file_priv,
+                                                       &r->handles[i]);
+                }
+
+                if (ret != 0)
+                        goto out;
+        }
+
+out:
+        if (ret != 0) {
+                /* Delete any previously-created handles on failure. */
+                for (i = 0; i < ARRAY_SIZE(r->handles); i++) {
+                        int j;
+
+                        if (r->handles[i])
+                                drm_gem_handle_delete(file_priv, r->handles[i]);
+
+                        /* Zero out any handles identical to the one we just
+                         * deleted.
+                         */
+                        for (j = i + 1; j < ARRAY_SIZE(r->handles); j++) {
+                                if (r->handles[j] == r->handles[i])
+                                        r->handles[j] = 0;
+                        }
+                }
+        }
+
+        drm_framebuffer_put(fb);
+        return ret;
+}
+
+
 /**
  * drm_mode_dirtyfb_ioctl - flush frontbuffer rendering on an FB
  * @dev: drm device for the ioctl
diff --git a/drivers/gpu/drm/drm_ioctl.c b/drivers/gpu/drm/drm_ioctl.c
index a2a87bedf..2bab10bb6 100644
--- a/drivers/gpu/drm/drm_ioctl.c
+++ b/drivers/gpu/drm/drm_ioctl.c
@@ -635,6 +635,7 @@ static const struct drm_ioctl_desc drm_ioctls[] = {
 	DRM_IOCTL_DEF(DRM_IOCTL_MODE_SETPROPERTY, drm_mode_connector_property_set_ioctl, DRM_MASTER|DRM_CONTROL_ALLOW|DRM_UNLOCKED),
 	DRM_IOCTL_DEF(DRM_IOCTL_MODE_GETPROPBLOB, drm_mode_getblob_ioctl, DRM_CONTROL_ALLOW|DRM_UNLOCKED),
 	DRM_IOCTL_DEF(DRM_IOCTL_MODE_GETFB, drm_mode_getfb, DRM_CONTROL_ALLOW|DRM_UNLOCKED),
+        DRM_IOCTL_DEF(DRM_IOCTL_MODE_GETFB2, drm_mode_getfb2_ioctl, DRM_CONTROL_ALLOW|DRM_UNLOCKED),
 	DRM_IOCTL_DEF(DRM_IOCTL_MODE_ADDFB, drm_mode_addfb, DRM_CONTROL_ALLOW|DRM_UNLOCKED),
 	DRM_IOCTL_DEF(DRM_IOCTL_MODE_ADDFB2, drm_mode_addfb2, DRM_CONTROL_ALLOW|DRM_UNLOCKED),
 	DRM_IOCTL_DEF(DRM_IOCTL_MODE_RMFB, drm_mode_rmfb, DRM_CONTROL_ALLOW|DRM_UNLOCKED),
diff --git a/include/uapi/drm/drm.h b/include/uapi/drm/drm.h
index 27eb278bb..b430a60d5 100644
--- a/include/uapi/drm/drm.h
+++ b/include/uapi/drm/drm.h
@@ -836,6 +836,7 @@ extern "C" {
 #define DRM_IOCTL_MODE_SETPROPERTY	DRM_IOWR(0xAB, struct drm_mode_connector_set_property)
 #define DRM_IOCTL_MODE_GETPROPBLOB	DRM_IOWR(0xAC, struct drm_mode_get_blob)
 #define DRM_IOCTL_MODE_GETFB		DRM_IOWR(0xAD, struct drm_mode_fb_cmd)
+#define DRM_IOCTL_MODE_GETFB2           DRM_IOWR(0xCE, struct drm_mode_fb_cmd2)
 #define DRM_IOCTL_MODE_ADDFB		DRM_IOWR(0xAE, struct drm_mode_fb_cmd)
 #define DRM_IOCTL_MODE_RMFB		DRM_IOWR(0xAF, unsigned int)
 #define DRM_IOCTL_MODE_PAGE_FLIP	DRM_IOWR(0xB0, struct drm_mode_crtc_page_flip)
-- 
2.17.1

